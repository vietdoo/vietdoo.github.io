{"version":3,"sources":["assets/warning.mp3","App.js","reportWebVitals.js","index.js"],"names":["labels","App","video","useRef","classifier","mobilenetModule","init","a","console","log","setupCamera","current","knnClassifier","mobilenet","Promise","resolve","reject","navigator","getUserMedia","stream","srcObject","addEventListener","error","changeRate","rate","document","getElementById","innerHTML","train","label","i","parseInt","training","embedding","infer","addExample","sleep","predicting","predictClass","result","run","ms","setTimeout","useEffect","className","ref","class","autoPlay","id","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1e68240e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/warning.578bb7a2.mp3\";","import './App.css';\nimport * as tf from '@tensorflow/tfjs';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as knnClassifier from'@tensorflow-models/knn-classifier';\nimport soundURL from './assets/warning.mp3';\nimport { useEffect, useRef } from 'react';\nimport '@tensorflow/tfjs-backend-webgl';\n\n\nconst labels = {'0' : 'OK', '1': 'Wear Mask Now !!!'}\nconst notTouch_Label = '0';\nconst touch_Label = '1';\nconst trainingTimes = 150;\n\nfunction App() { \n\n  const video = useRef();\n  const classifier = useRef();\n  const mobilenetModule = useRef();\n\n  const init = async () => {\n    console.log('init...s')\n    await setupCamera();\n    console.log('setup camera sucessfully');\n    classifier.current = knnClassifier.create();\n    mobilenetModule.current = await mobilenet.load();\n\n    console.log(\"Setup done\");\n\n  }\n\n  const setupCamera = () => {\n    return new Promise((resolve, reject) => {\n      navigator.getUserMedia = navigator.getUserMedia\n      if (navigator.getUserMedia) {\n        navigator.getUserMedia(\n          {video: true},\n          stream => {\n            video.current.srcObject = stream;\n            video.current.addEventListener('loadeddata', resolve);\n          },\n          error => reject(error)\n        );\n      } else {\n        reject();\n      }\n    });\n  };\n\n  const changeRate = rate => {\n    document.getElementById('nr').innerHTML = rate + '%';\n  }\n\n  const train = async label => {\n    document.getElementById('nt').innerHTML = 'In process';\n    console.log('Training: ', label);\n    for (let i = 0; i < trainingTimes; i++) {\n      let rate = parseInt((i+1)/trainingTimes*100)\n      console.log('Rate: ', rate, '%');\n      changeRate(rate);\n      await training(label);\n    }\n    document.getElementById('nt').innerHTML = 'Completed';\n    document.getElementById('nr').innerHTML = '';\n  }\n\n  const training = label => {\n    return new Promise(async resolve => {\n      const embedding = mobilenetModule.current.infer(video.current, true);\n      \n      classifier.current.addExample(embedding, label);\n      \n      await sleep(100);\n      resolve();\n    });\n  }\n\n  const predicting = async () => {\n    const embedding = mobilenetModule.current.infer(video.current, true);\n    const result = await classifier.current.predictClass(embedding);\n    document.getElementById('nr').innerHTML = labels[result.label];\n    await sleep(1000);\n    predicting();\n  }\n\n  const run = async () => {\n    document.getElementById('nt').innerHTML = '[Status]';\n    predicting();\n  }\n\n  const sleep = (ms = 0) => {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  useEffect (() => {\n    init();\n\n    return () => {\n\n    }\n  }, []);\n\n  return (\n    <div className=\"main\">\n      <video\n        ref={video}\n        class=\"video\"\n        autoPlay\n      />\n\n      <div className=\"nofis\">\n        <div id=\"nt\"></div>\n        <div id=\"nr\"></div>\n      </div>\n\n      <div className=\"control\">\n         <button className=\"btn\" id = \"b1\" onClick={() => train(notTouch_Label)}>Train 1</button>\n         <button className=\"btn\" id = \"b2\" onClick={() => train(touch_Label)}>Train 2</button>\n         <button className=\"btn\" id = \"br\" onClick={() => run()}>Run AI Prediction</button>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}